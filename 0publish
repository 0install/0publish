#!/usr/bin/env python
from zeroinstall.injector import gpg
from optparse import OptionParser
import os, sys
import signing
from logging import info, debug
import edit, validator

version = '0.1'

parser = OptionParser(usage="usage: %prog [options] interface")
parser.add_option("-k", "--key", help="key to use for signing")
parser.add_option("-e", "--edit", help="edit with $EDITOR", action='store_true')
parser.add_option("-l", "--local", help="create feed from local interface")
parser.add_option("-r", "--release", help="set versions and dates", action='store_true')
parser.add_option("-x", "--xmlsign", help="add an XML signature block", action='store_true')
parser.add_option("-v", "--verbose", help="more verbose output", action='count')
parser.add_option("-V", "--version", help="display version information", action='store_true')

(options, args) = parser.parse_args()

force_save = False

if options.version:
	print "0publish (zero-install) " + version
	print "Copyright (C) 2005 Thomas Leonard"
	print "This program comes with ABSOLUTELY NO WARRANTY,"
	print "to the extent permitted by law."
	print "You may redistribute copies of this program"
	print "under the terms of the GNU General Public License."
	print "For more information about these matters, see the file named COPYING."
	sys.exit(0)

if options.verbose:
	import logging
	logger = logging.getLogger()
	if options.verbose == 1:
		logger.setLevel(logging.INFO)
	else:
		logger.setLevel(logging.DEBUG)

if len(args) != 1:
	parser.print_help()
	sys.exit(1)
interface = args[0]

def confirm(q):
	while True:
		ans = raw_input(q + " [Y/N] ").lower()
		if ans in ('y', 'yes'): return True
		if ans in ('n', 'no'): return False

# Load or create the starting data...

if os.path.exists(interface):
	contents = file(interface).read()
	data, sign_fn, key = signing.check_signature(interface)
elif options.local:
	import create
	if os.path.exists(options.local):
		data = create.create_from_local(options.local)
		sign_fn = signing.sign_unsigned
		key = None
		force_save = True
	else:
		raise Exception("File '%s' does not exist." % options.local)
else:
	if confirm("Interface file '%s' does not exist. Create it?" % interface):
		from create import create
		data = create(interface)
		sign_fn = signing.sign_unsigned
		key = None
		options.edit = True
	else:
		sys.exit(1)

debug("Original data: %s", data)
info("Original signing method: %s", sign_fn.__name__)
info("Original key: %s", key)

old_data = data
old_sign_fn = sign_fn
old_key = key

while True:
	# Validate the input...
	try:
		validator.check(data)
		break
	except validator.InvalidInterface, ex:
		print "Invalid interface: " + str(ex)

	while True:
		ans = raw_input("Interface is invalid. (E)dit or (A)bort?").lower()
		if ans in ('e', 'edit'):
			data = edit.edit(data)
			options.edit = False	# Don't edit twice
			break
		if ans in ('a', 'abort'): sys.exit(1)

# Process it...
if options.xmlsign:
	sign_fn = signing.sign_xml
if options.key:
	print "Changing key from '%s' to '%s'" % (key, options.key)
	key = options.key
if options.release:
	import release
	data = release.make_release(data)
if options.local:
	import merge
	data = merge.merge(data, options.local)
if options.edit:
	data = edit.edit(data)

while True:
	# Validate the result...
	try:
		validator.check(data)
		break
	except validator.InvalidInterface, ex:
		print "Invalid interface: " + str(ex)

	while True:
		ans = raw_input("Interface is invalid. (E)dit or (A)bort?").lower()
		if ans in ('e', 'edit'):
			data = edit.edit(data)
			break
		if ans in ('a', 'abort'): sys.exit(1)


if (old_data == data and sign_fn == old_sign_fn and key == old_key) and not force_save:
	print "Interface unchanged. Not writing."
	sys.exit(1)

# Write it back out
if not data.endswith('\n'): data += '\n'
sign_fn(interface, data, key)

print "Wrote", interface
