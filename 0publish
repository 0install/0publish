#!/usr/bin/env python
from zeroinstall import SafeException
from xml.dom import minidom
from optparse import OptionParser
import os, sys
import signing
from logging import info, debug
import edit, validator, create

version = '0.20'

parser = OptionParser(usage="usage: %prog [options] interface")
parser.add_option("-a", "--add-from", help="add implementations from FEED", metavar='FEED')
parser.add_option("--add-types", help="add missing MIME-type attributes", action='store_true')
parser.add_option("-c", "--create", help="create file if nonexistant", action='store_true')
parser.add_option("-d", "--add-digest", help="add extra digests", action='store', metavar='ALG')
parser.add_option("-e", "--edit", help="edit with $EDITOR", action='store_true')
parser.add_option("-k", "--key", help="key to use for signing")
parser.add_option("-m", "--merge", help="deprecated; use --add-from instead", dest='add_from', metavar='LOCAL')
parser.add_option("--manifest-algorithm", help="select algorithm for manifests", action='append', metavar='ALG')
parser.add_option("-s", "--stable", help="mark testing version stable", action='store_true')
parser.add_option("-x", "--xmlsign", help="add an XML signature block", action='store_true')
parser.add_option("-u", "--unsign", help="remove any signature", action='store_true')
parser.add_option("-v", "--verbose", help="more verbose output", action='count')
parser.add_option("-V", "--version", help="display version information", action='store_true')

(options, args) = parser.parse_args()

force_save = options.create

if options.version:
	print "0publish (zero-install) " + version
	print "Copyright (C) 2005-2010 Thomas Leonard"
	print "This program comes with ABSOLUTELY NO WARRANTY,"
	print "to the extent permitted by law."
	print "You may redistribute copies of this program"
	print "under the terms of the GNU General Public License."
	print "For more information about these matters, see the file named COPYING."
	sys.exit(0)

if options.verbose:
	import logging
	logger = logging.getLogger()
	if options.verbose == 1:
		logger.setLevel(logging.INFO)
	else:
		logger.setLevel(logging.DEBUG)

if len(args) != 1:
	parser.print_help()
	sys.exit(1)
interface = args[0]

def confirm(q):
	while True:
		ans = raw_input(q + " [Y/N] ").lower()
		if ans in ('y', 'yes'): return True
		if ans in ('n', 'no'): return False

try:
	# Load or create the starting data...

	if os.path.exists(interface):
		contents = file(interface).read()
		data, sign_fn, key = signing.check_signature(interface)
	elif options.add_from:
		if os.path.exists(options.add_from):
			data = create.create_from_local(options.add_from)
			sign_fn = signing.sign_unsigned
			key = None
			force_save = True
			options.add_from = False
		else:
			raise Exception("File '%s' does not exist." % options.add_from)
	else:
		if options.create or confirm("Interface file '%s' does not exist. Create it?" % interface):
			data = create.create(interface)
			sign_fn = signing.sign_unsigned
			key = None
			options.edit = not options.create
		else:
			sys.exit(1)

	debug("Original data: %s", data)
	info("Original signing method: %s", sign_fn.__name__)
	info("Original key: %s", key)

	old_data = data
	old_sign_fn = sign_fn
	old_key = key

	if sign_fn is signing.sign_unsigned and options.key:
		sign_fn = signing.sign_xml

	while True:
		# Validate the input...
		try:
			validator.check(data, warnings = False)	# Don't warn on load AND save!
			break
		except validator.InvalidInterface, ex:
			print "Invalid interface: " + str(ex)

		while True:
			ans = raw_input("Interface is invalid. (E)dit or (A)bort?").lower()
			if ans in ('e', 'edit'):
				data = edit.edit(data)
				options.edit = False	# Don't edit twice
				break
			if ans in ('a', 'abort'): sys.exit(1)

	# Process it...
	if options.xmlsign:
		sign_fn = signing.sign_xml
	if options.unsign:
		sign_fn = signing.sign_unsigned
	if options.key:
		print "Changing key from '%s' to '%s'" % (key, options.key)
		key = options.key
	if options.stable:
		import stable
		data = stable.mark_stable(data)
	if options.add_from:
		import merge
		data = merge.merge(data, options.add_from)
	if options.add_digest:
		import digest
		data = digest.add_digests(data, alg = options.add_digest)
	if options.add_types:
		import mimetypes
		data = mimetypes.add_types(data)
	if options.edit:
		data = edit.edit(data)

	while True:
		# Validate the result...
		try:
			validator.check(data)
			break
		except validator.InvalidInterface, ex:
			print "Invalid interface: " + str(ex)

		while True:
			ans = raw_input("Interface is invalid. (E)dit or (A)bort?").lower()
			if ans in ('e', 'edit'):
				data = edit.edit(data)
				break
			if ans in ('a', 'abort'): sys.exit(1)

	if (old_data == data and sign_fn == old_sign_fn and key == old_key) and not force_save:
		print "Interface unchanged. Not writing."
		sys.exit(1)

	# Tidy up the XML
	doc = minidom.parseString(data)
	data = create.xml_header + doc.documentElement.toxml('utf-8')

	# Write it back out
	if not data.endswith('\n'): data += '\n'
	sign_fn(interface, data, key)

	info("Wrote '%s'", interface)

	if sign_fn != signing.sign_unsigned:
		# Read it back in to find out what key we signed it with
		# and ensure that the key has been exported
		contents = file(interface).read()
		saved_data, saved_sign_fn, saved_key = signing.check_signature(interface)
		assert saved_data == data
		assert saved_sign_fn == sign_fn
		signing.export_key(os.path.dirname(interface), saved_key)
except KeyboardInterrupt, ex:
	print >>sys.stderr, "Aborted at user's request"
	sys.exit(1)
except SafeException, ex:
	if options.verbose: raise
	print >>sys.stderr, ex
	sys.exit(1)
